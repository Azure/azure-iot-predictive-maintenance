// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RClient
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// predictive maintenance service
    /// </summary>
    public partial interface IPredictiveMaintenance : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// Logs the user in
        /// </summary>
        /// <param name='loginRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AccessTokenResponse>> LoginWithHttpMessagesAsync(LoginRequest loginRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The user renews access token and refresh token
        /// </summary>
        /// <param name='renewTokenRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AccessTokenResponse>> RenewTokenWithHttpMessagesAsync(RenewTokenRequest renewTokenRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The user revokes a refresh token
        /// </summary>
        /// <param name='refreshToken'>
        /// The refresh token to be revoked
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AccessTokenResponse>> RevokeRefreshTokenWithHttpMessagesAsync(string refreshToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Consume the PredictiveMaintenance web service.
        /// </summary>
        /// <param name='webServiceParameters'>
        /// Input parameters to the web service.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WebServiceResult>> PredictiveWithHttpMessagesAsync(InputParameters webServiceParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Consume the PredictiveMaintenance web service asynchronously.
        /// </summary>
        /// <param name='batchWebServiceParameters'>
        /// Input parameters to the web service.
        /// </param>
        /// <param name='parallelCount'>
        /// Number of threads used to process entries in the batch. Default
        /// value is 10. Please make sure not to use too high of a number
        /// because it might negatively impact performance.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StartBatchExecutionResponse>> StartBatchExecutionWithHttpMessagesAsync(IList<InputParameters> batchWebServiceParameters, int? parallelCount = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all batch executions for PredictiveMaintenance.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetBatchExecutionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all batch executions for PredictiveMaintenance.
        /// </summary>
        /// <param name='executionId'>
        /// Execution id of the execution
        /// </param>
        /// <param name='showPartialResults'>
        /// Returns the already processed results of the batch execution even
        /// if it hasn't been fully completed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BatchWebServiceResult>> GetBatchExecutionStatusWithHttpMessagesAsync(string executionId, bool? showPartialResults = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels and deletes all batch executions for PredictiveMaintenance.
        /// </summary>
        /// <param name='executionId'>
        /// Execution id of the execution.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> CancelAndDeleteBatchExecutionWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all files from an individual execution in
        /// PredictiveMaintenance.
        /// </summary>
        /// <param name='executionId'>
        /// Execution id of the execution
        /// </param>
        /// <param name='index'>
        /// Index of the execution in the batch.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetBatchExecutionFilesWithHttpMessagesAsync(string executionId, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a specific file from an execution in PredictiveMaintenance.
        /// </summary>
        /// <param name='executionId'>
        /// Execution id of the execution
        /// </param>
        /// <param name='index'>
        /// Index of the execution in the batch.
        /// </param>
        /// <param name='fileName'>
        /// Name of the file to be returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<System.IO.Stream>> GetBatchExecutionFileWithHttpMessagesAsync(string executionId, int index, string fileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
